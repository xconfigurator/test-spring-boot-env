<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <!--<version>2.4.4</version>-->
        <!--<version>2.6.2</version>--><!-- 20220120 upgraded -->
        <version>2.6.5</version><!-- 20220331 upgraded for SpEL -->
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!-- 坐标 begin -->
    <groupId>liuyang</groupId>
    <artifactId>test-spring-boot-env</artifactId>
    <version>0.0.1-SNAPSHOT</version><!-- 配合私服的发布规则（需配合distributionManagement）：0.0.1-SNAPSHOT发布到snapshots仓库，0.0.1或者0.0.1-RELEASE发布到releases仓库。 -->
    <!-- 坐标 end -->

    <name>test-spring-boot-env</name>
    <!-- 打包格式 begin -->
    <!-- 实践：Spring Boot项目最好从start.spring.io生成示例骨架。 -->
    <!--<packaging>jar</packaging>--><!-- 默认是jar。使用start.spring.io生成的目标是jar的骨架不带这个配置。-->
    <!-- <packaging>war</packaging> --><!-- 实测打开有效，可打成war。但若想工程可运行需要同时修改Spring Boot启动类。-->
    <!-- 打包格式 end -->
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>11</java.version>
        <fastjson.version>1.2.83</fastjson.version><!-- 20220606 upgrade from 1.2.76 to 1.2.83 基于已知安全漏洞 -->
        <gson.version>2.9.0</gson.version>
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <commons-beanutils.version>1.9.4</commons-beanutils.version>
        <httpclient.version>4.5.13</httpclient.version>
        <passay.version>1.6.1</passay.version>
        <problem.version>0.27.0</problem.version>
        <!--<dozer.version>6.5.2</dozer.version>--><!-- 20220711 计划不再使用dozer 只写在这保留用过的记录 -->

        <!-- webjar begin -->
        <jquery.version>3.5.1</jquery.version>
        <layui.version>2.5.6</layui.version>
        <webjars-locator.version>0.40</webjars-locator.version>
        <bootstrap.version>5.0.1</bootstrap.version>
        <axios.version>0.21.1</axios.version>
        <sockjs-client.version>1.1.2</sockjs-client.version>
        <stomp-websocket.version>2.3.3</stomp-websocket.version><!-- Simple Text Oriented Messaging Protocol https://docs.spring.io/spring-framework/docs/5.3.21/reference/html/web.html#websocket-stomp-->
        <!-- webjar end -->

        <!-- swagger begin -->
        <springfox-swagger2.version>2.9.2</springfox-swagger2.version>
        <springfox-swagger-ui.version>2.9.2</springfox-swagger-ui.version>
        <swagger-bootstrap-ui.version>1.9.3</swagger-bootstrap-ui.version>
        <!-- swagger end -->

        <!-- cxf begin -->
        <cxf-spring-boot-starter-jaxws.version>3.4.3</cxf-spring-boot-starter-jaxws.version>
        <cxf-spring-boot-starter-jaxrs.version>3.4.3</cxf-spring-boot-starter-jaxrs.version>
        <!-- cxf end -->
    </properties>
    <dependencies>
        <!-- Spring Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring WebFlux -->
        <!-- 20211126 为使用WebClient引入 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <!-- Bean Validation -->
        <!-- JSR 380 2.0  JSR 348 1.1  JSR 303 1.0 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- Thymeleaf 页面标签级别的授权验证 -->
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity5</artifactId>
        </dependency>

        <!-- webjars-locator -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator</artifactId>
            <version>${webjars-locator.version}</version>
        </dependency>

        <!-- 不使用locator -->
        <!--script src="/webjars/jquery/3.5.1/jquery.min.js"></script> -->
        <!-- 使用locator -->
        <!--<script src="/webjars/jquery/jquery.min.js"></script>  -->

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>${jquery.version}</version>
        </dependency>

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>layui</artifactId>
            <version>${layui.version}</version>
        </dependency>

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>${bootstrap.version}</version>
        </dependency>

        <!-- axios webjar aliyun仓库没有 202201241546 已经有了！-->
        <dependency>
            <groupId>org.webjars.bowergithub.axios</groupId>
            <artifactId>axios</artifactId>
            <version>${axios.version}</version>
        </dependency>

        <!-- websocket 相关 sockjs-client -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>sockjs-client</artifactId>
            <version>${sockjs-client.version}</version>
        </dependency>

        <!-- websocket 相关 stomp-websocket -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>stomp-websocket</artifactId>
            <version>${stomp-websocket.version}</version>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox-swagger2.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox-swagger-ui.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>swagger-bootstrap-ui</artifactId>
            <version>${swagger-bootstrap-ui.version}</version>
        </dependency>

        <!-- Swagger 另一种依赖配置 -->
        <!-- https://github.com/springfox/springfox -->
        <!--<dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>-->

        <!-- WebSockets -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!-- Web Services::spring web services -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web-services</artifactId>
        </dependency>-->

        <!-- Web Services::CXF -->
        <!-- CXF -->
        <!--<dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-spring-boot-starter-jaxws</artifactId>
            <version>${cxf-spring-boot-starter-jaxws.version}</version>
        </dependency>-->
        <!-- CXF -->
        <!--<dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-spring-boot-starter-jaxrs</artifactId>
            <version>${cxf-spring-boot-starter-jaxrs.version}</version>
        </dependency>-->

        <!-- Spring Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!-- Spring Security JWT -->
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-jwt -->
        <!--<dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-jwt</artifactId>
            <version>1.1.1.RELEASE</version>
        </dependency>-->

        <!-- Spring initializr I/O Spring cache abstraction JSR 107-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache</artifactId>
        </dependency>

        <!-- Spring Session Data Redis -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>

        <!-- Quartz I/O-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-quartz</artifactId>
        </dependency>

        <!-- Sping initializr I/O Java Mail Sender -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

        <!-- Data -->
        <!-- MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!-- SQLServer -->
        <!--
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>sqljdbc4</artifactId>
            <version>4.0</version>
        </dependency>
        -->

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- RabbitMQ -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>-->

        <!-- Spring initializr NoSQL Spring Data Redis(Access + Driver)  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- MyBatis-Plus --> <!-- 2021/7/1 换为Spring Data JPA MyBatis-Plus的部分参考其他工程 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.4.2</version>
        </dependency>

        <!-- Spring Data JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Jackson Datatype:JSR310 默认已有 -->
        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310 -->
        <!--<dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.13.2</version>
        </dependency>-->

        <!-- FastJSON -->
        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>

        <!-- Google Gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>

        <!-- ReflectionToStringBuilder -->
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>${commons-beanutils.version}</version>
        </dependency>

        <!-- HttpClient -->
<!--        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
            <version>5.1.2</version>
        </dependency>-->
        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
        </dependency>

        <!-- Passay -->
        <dependency>
            <groupId>org.passay</groupId>
            <artifactId>passay</artifactId>
            <version>${passay.version}</version>
        </dependency>

        <!-- Problem -->
        <!-- 用于简化Spring MVC向前端返回的错误信息 -->
        <dependency>
            <groupId>org.zalando</groupId>
            <artifactId>problem-spring-web</artifactId>
            <version>${problem.version}</version>
        </dependency>

        <!-- Dozer::Core -->
        <!--
        <dependency>
            <groupId>com.github.dozermapper</groupId>
            <artifactId>dozer-core</artifactId>
            <version>${dozer.version}</version>
        </dependency>
         -->
        <!-- Dozer::Integrations::Spring Support::Starter -->
        <!--<dependency>
            <groupId>com.github.dozermapper</groupId>
            <artifactId>dozer-spring-boot-starter</artifactId>
            <version>${dozer.version}</version>
        </dependency>-->

        <!-- EasyExcel -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>2.2.6</version>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--
        2022-03-31 10:37:40.162 [Thread-0] DEBUG o.s.b.d.restart.classloader.RestartClassLoader - Created RestartClassLoader org.springframework.boot.devtools.restart.classloader.RestartClassLoader@4a86d18
        2022-03-31 10:37:48.848 [restartedMain] INFO  o.s.b.d.autoconfigure.OptionalLiveReloadServer - LiveReload server is running on port 35729
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- 20220413 add -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- 20220516 add -->
        <!-- Snowflake::Hutool -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-captcha</artifactId>
            <version>4.6.8</version>
        </dependency>

        <!-- 20220606 add -->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
        </dependency>

        <!-- RsaUtils 需要 -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.5</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.4.7</version>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- liuyang 202112271638 解决配置ssl时，maven打包中修改p12文件问题 begin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version><!-- 20220712 fix Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources -->
                <configuration>
                    <encoding>UTF-8</encoding><!-- 注意一定要加这个编码！！！ -->
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>p12</nonFilteredFileExtension>
                        <!--<nonFilteredFileExtension>pem</nonFilteredFileExtension>
                        <nonFilteredFileExtension>pfx</nonFilteredFileExtension>-->
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
            <!-- liuyang 202112271638 解决配置ssl时，maven打包中修改p12文件问题 ends -->
        </plugins>
        <!-- liuyang 202103301125 add fix MyBatis 的mapper.xml找不到问题 begin -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.json</include>
                    <include>**/*.flt</include>
                </includes>
            </resource>
        </resources>
        <!-- liuyang 202103301125 add fix MyBatis 的mapper.xml找不到问题 end -->
    </build>

    <!-- 发布到私服 liuyang 20220712 add begin -->
    <!-- step1 配置：在项目的pom.xml中配置私服仓库地址。 并不要配置仓库组的地址，要明确指定发布的repository名称。-->
    <!-- setp2 打包：mvn deploy 或者选择IntelliJ右侧Maven视图Lifecycle 对应的指令即可。-->
    <!-- 注1：具体发布到哪个仓库是由坐标中的version来决定的。-->
    <!-- e.g. 1.0-SNAPSHOT 发布到 snapshots.-->
    <!-- e.g. 1.0或者1.0-RELEASE 发布到releases. -->
    <!-- 注2：该配置仅影响deploy指令。在不执行deploy指令的时候该配置不影响程序本地开发调试。所以就先打开吧。 -->
    <distributionManagement>
        <repository>
            <id>nexus-shine</id><!-- nexus认证id -->
            <url>http://localhost:8081/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>nexus-shine</id><!-- nexus认证id -->
            <url>http://localhost:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>
    <!-- 发布到私服 liuyang 20220712 add end -->
</project>
